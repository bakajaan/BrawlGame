gitのルールを記述(テキストエディタからの編集禁止)

コミットメッセージ
[種類]タイトル
(空行)
具体的な編集内容

コミットの注意
    バグ修正と機能追加を一緒にコミットしない
    他のコミットに混ざる為、コミット前にできるだけフォーマットを行う
    javadocは作成した時点でつけるようにする
    javadocの記述を忘れてた場合は独立してjavadocの更新のみのコミットを行う
    featureブランチとhotfixブランチ以外には直接コミットは行わない

GitFlowブランチの構成
    developブランチ
        開発の基盤となるブランチ
        共有するブランチの為、バグが残った状態でのマージはNG
        リベースは行わず必ずプルで変更がない事を確認してからマージする
    featureブランチ
        機能追加等作業用ブランチ
        個人で開発ごとにdevelopブランチから切って生成する
        開発終了ごとにdevelopブランチにマージしたら破棄を行う
    masterブランチ
        一番最新の人に見せられるブランチ
        リリースするたびにリベースされる
        またhotfixブランチでバグ修正を行ってもリベースされる
    hotfixブランチ
        リリース後のバグ修正用ブランチ
        現存するバグを修正するのはfeatureブランチではなくこっちで行う
        修正したらGitFlowメニューより、短くわかりやすいタグをつけてマージを行う
        完了するとdevelopブランチとmasterブランチに影響する
    releaseブランチ
        リリースした内容を履歴として残すブランチ
        絶対このブランチにコミットやマージを行ってはいけない

ブランチの切り方
1.GitFlowメニューからフィーチャーブランチの作成(学籍番号下3桁)
2.切ったブランチを空のままプッシュし、リモートブランチの生成
3.ローカルブランチにコミットを追加していく
4.他の人に作業内容が伝わるように定期的にリモートブランチへプッシュする
5.作業内容が終了したら、正常に実行できることを確認して最後にプッシュを行う
6.GitFlowメニューからフィーチャーブランチを完了させる
7.ローカルのdevelopブランチにマージされているので、
    実際に実行して正しくマージされていることを確認する
8.developブランチをプッシュし、リモートのdevelopブランチに反映させる
9.リモートのfeatureブランチは消えてないので、
    ブランチメニューから完了したfeatureブランチを削除する

エラーが出た時の対処法
    ロールバックしたくない場合
        フェッチでリモートの変更内容がないか確認する
        編集ソフトで直接プッシュorプルを行い、変更内容を確認し、手動で修正する
    ロールバックしてもいい場合
        エラーが出たブランチで、コミットを選択しそのコミットまでリセットを行う

コミットしていない変更がありますと表示された時の対処法
    一度編集ソフト側でプロジェクトごとコミットするべーじを開き、変更点がないかを確認
    コミットするファイルが存在したら、確認し変更内容を記述してコミット
    ファイルが変更の覚えのないものなら、環境依存のファイルでないか確認
    環境依存のファイルでない場合は詳しい状況をコミット内容に記述してコミット
    コミットファイルが存在していない場合又は環境依存のファイルだった場合、
        ソースツリーのファイルステータスで作業ツリーのファイルを確認
    インデックスに追加し、右クリックで無視指定するかコミット内容を書いてコミット